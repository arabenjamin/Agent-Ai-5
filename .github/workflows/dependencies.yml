name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Rust Dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [mcp-client, mcp-http-bridge, mcp-server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-edit
      run: cargo install cargo-edit

    - name: Update dependencies
      run: |
        cargo update
        cargo upgrade --workspace
      working-directory: ${{ matrix.project }}

    - name: Run tests after update
      run: cargo test
      working-directory: ${{ matrix.project }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore(${{ matrix.project }}): update dependencies"
        title: "chore(${{ matrix.project }}): update dependencies"
        body: |
          ## Dependency Updates for ${{ matrix.project }}
          
          This PR updates the dependencies for the ${{ matrix.project }} project.
          
          ### Changes
          - Updated all dependencies to their latest compatible versions
          - Ran tests to ensure compatibility
          
          ### Testing
          - [x] All tests pass
          - [x] No breaking changes detected
          
          This PR was automatically created by the dependency update workflow.
        branch: update-deps-${{ matrix.project }}
        delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: |
        for project in mcp-client mcp-http-bridge mcp-server; do
          echo "🔍 Auditing $project..."
          cd $project
          cargo audit --json > ../${project}-audit.json || echo "Audit found issues in $project"
          cd ..
        done

    - name: Create security issue if vulnerabilities found
      run: |
        for project in mcp-client mcp-http-bridge mcp-server; do
          if [ -f "${project}-audit.json" ] && [ "$(cat ${project}-audit.json | jq '.vulnerabilities.count')" != "0" ]; then
            echo "🚨 Security vulnerabilities found in $project!"
            cat ${project}-audit.json | jq '.vulnerabilities.list'
          fi
        done

  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-outdated
      run: cargo install cargo-outdated

    - name: Check for outdated dependencies
      run: |
        for project in mcp-client mcp-http-bridge mcp-server; do
          echo "📦 Checking outdated dependencies for $project..."
          cd $project
          cargo outdated --root-deps-only
          cd ..
        done